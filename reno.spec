#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : reno
Version  : 3.0.0
Release  : 43
URL      : https://files.pythonhosted.org/packages/73/e5/f524a35fd7defec5365a17f4d5a919ebb3936d0d7219f64c3704c458e865/reno-3.0.0.tar.gz
Source0  : https://files.pythonhosted.org/packages/73/e5/f524a35fd7defec5365a17f4d5a919ebb3936d0d7219f64c3704c458e865/reno-3.0.0.tar.gz
Summary  : RElease NOtes manager
Group    : Development/Tools
License  : Apache-2.0
Requires: reno-bin = %{version}-%{release}
Requires: reno-license = %{version}-%{release}
Requires: reno-python = %{version}-%{release}
Requires: reno-python3 = %{version}-%{release}
Requires: PyYAML
Requires: docutils
Requires: dulwich
Requires: pbr
BuildRequires : PyYAML
BuildRequires : buildreq-distutils3
BuildRequires : docutils
BuildRequires : dulwich
BuildRequires : pbr

%description
=========================================
 reno: A New Way to Manage Release Notes
=========================================

Reno is a release notes manager designed with high throughput in mind,
supporting fast distributed development teams without introducing
additional development processes.  Our goal is to encourage detailed
and accurate release notes for every release.

Reno uses git to store its data, along side the code being
described. This means release notes can be written when the code
changes are fresh, so no details are forgotten. It also means that
release notes can go through the same review process used for managing
code and other documentation changes.

Reno stores each release note in a separate file to enable a large
number of developers to work on multiple patches simultaneously, all
targeting the same branch, without worrying about merge
conflicts. This cuts down on the need to rebase or otherwise manually
resolve conflicts, and keeps a development team moving quickly.

Reno also supports multiple branches, allowing release notes to be
back-ported from master to maintenance branches together with the
code for bug fixes.

Reno organizes notes into logical groups based on whether they
describe new features, bug fixes, known issues, or other topics of
interest to the user. Contributors categorize individual notes as they
are added, and reno combines them before publishing.

Notes can be styled using reStructuredText directives, and reno's
Sphinx integration makes it easy to incorporate release notes into
automated documentation builds.

Notes are automatically associated with the release version based on
the git tags applied to the repository, so it is not necessary to
track changes manually using a bug tracker or other tool, or to worry
that an important change will be missed when the release notes are
written by hand all at one time, just before a release.

Modifications to notes are incorporated when the notes are shown in
their original location in the history. This feature makes it possible
to correct typos or otherwise fix a published release note after a
release is made, but have the new note content associated with the
original version number. Notes also can be deleted, eliminating them
from future documentation builds.

Project Meta-data
=================

.. .. image:: https://governance.openstack.org/tc/badges/reno.svg
    :target: https://governance.openstack.org/tc/reference/tags/index.html

* Free software: Apache license
* Documentation: https://docs.openstack.org/reno/latest/
* Source: https://git.openstack.org/cgit/openstack/reno
* Bugs: https://storyboard.openstack.org/#!/project/933
* IRC: #openstack-release on freenode

%package bin
Summary: bin components for the reno package.
Group: Binaries
Requires: reno-license = %{version}-%{release}

%description bin
bin components for the reno package.


%package license
Summary: license components for the reno package.
Group: Default

%description license
license components for the reno package.


%package python
Summary: python components for the reno package.
Group: Default
Requires: reno-python3 = %{version}-%{release}

%description python
python components for the reno package.


%package python3
Summary: python3 components for the reno package.
Group: Default
Requires: python3-core
Provides: pypi(reno)

%description python3
python3 components for the reno package.


%prep
%setup -q -n reno-3.0.0
cd %{_builddir}/reno-3.0.0

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1583218755
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$CFLAGS -fno-lto "
export FFLAGS="$CFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/reno
cp %{_builddir}/reno-3.0.0/LICENSE %{buildroot}/usr/share/package-licenses/reno/294b43b2cec9919063be1a3b49e8722648424779
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files bin
%defattr(-,root,root,-)
/usr/bin/reno

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/reno/294b43b2cec9919063be1a3b49e8722648424779

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
